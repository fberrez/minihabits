name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p ~/minihabits
            mkdir -p ~/minihabits/mongodb/data/db
            
            # Create .env file on the server
            cat > ~/minihabits/.env << EOL
            CORS_ORIGIN="${{ secrets.CORS_ORIGIN }}"
            FRONTEND_URL="${{ vars.FRONTEND_URL }}"
            JWT_EXPIRATION_TIME="${{ vars.JWT_EXPIRATION_TIME }}"
            JWT_REFRESH_EXPIRATION_TIME="${{ vars.JWT_REFRESH_EXPIRATION_TIME }}"
            JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}"
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            MONGODB_URI="${{secrets.MONGODB_URI }}"
            NODE_ENV="production"
            PORT="3000"
            RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}"
            RESEND_FROM="${{ vars.RESEND_FROM }}"
            RESEND_AUDIENCE_ID="${{ vars.RESEND_AUDIENCE_ID }}"
            STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}"
            STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}"
            STRIPE_PRICE_MONTHLY_ID="${{ secrets.STRIPE_PRICE_MONTHLY_ID }}"
            STRIPE_PRICE_YEARLY_ID="${{ secrets.STRIPE_PRICE_YEARLY_ID }}"
            STRIPE_PRICE_LIFETIME_ID="${{ secrets.STRIPE_PRICE_LIFETIME_ID }}"
            EOL
            
            # Create docker-compose.yml file directly on the server
            cat > ~/minihabits/docker-compose.yml << 'EOL'
            services:
              minihabits:
                image: ghcr.io/${{ github.repository }}:latest
                container_name: minihabits-api
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=web"
                  - "traefik.http.routers.minihabits-api.rule=Host(`minihabits-api.fberrez.co`)"
                  - "traefik.http.routers.minihabits-api.entrypoints=websecure"
                  - "traefik.http.routers.minihabits-api.tls.certresolver=myresolver"
                  - "traefik.http.services.minihabits-api.loadbalancer.server.port=3000"
                  - "traefik.http.services.minihabits-api.loadbalancer.server.scheme=http"
                env_file:
                  - .env
                environment:
                  - MONGODB_URI=mongodb://${{ secrets.MONGO_INITDB_ROOT_USERNAME }}:${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}@mongodb:27017/minihabits?authSource=admin
                restart: unless-stopped
                depends_on:
                  - mongodb
                healthcheck:
                  test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/healthcheck', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                  start_period: 15s
                networks:
                  - web

            networks:
              web:
                external: true
            EOL
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            cd ~/minihabits
            docker compose pull
            
            # Deploy with zero downtime
            docker compose up -d --force-recreate
            
            # Clean up old images
            docker image prune -af 